local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Create a ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = playerGui

-- Create four draggable buttons
local buttons = {}
local closeButtonSize = UDim2.new(0, 150, 0, 40) -- Slightly smaller horizontal size for the Close button
local buttonSize = UDim2.new(0, 150, 0, 50) -- Slightly smaller horizontal size for the buttons
local buttonSpacing = 10 -- Spacing between buttons

-- Create the Close button first
local closeButton = Instance.new("TextButton")
closeButton.Size = closeButtonSize -- Adjusted size for the Close button
closeButton.Position = UDim2.new(0.5, -75, 0.4, 0) -- Position for Close button (original position of "-")
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red color
closeButton.Font = Enum.Font.GothamBold
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.TextSize = 20
closeButton.Text = "Close" -- Close button text
closeButton.Parent = screenGui
table.insert(buttons, closeButton)

-- Function to close the GUI
closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

-- Create the other two buttons with the provided RGB color and rename them
local buttonNames = {"Walk", "Ghost Mode"}
for i = 1, 2 do
    local button = Instance.new("TextButton")
    button.Size = buttonSize
    button.Text = buttonNames[i] -- Set button text to the corresponding name
    button.Position = UDim2.new(0.5, -75, 0.4 + i * (0.05 + closeButtonSize.Y.Scale), 0) -- Adjusted for new size and spacing
    button.BackgroundColor3 = Color3.fromRGB(240, 211, 96) -- Provided RGB color
    button.Font = Enum.Font.GothamBold
    button.TextColor3 = Color3.new(1, 1, 1)
    button.TextSize = 20
    button.Parent = screenGui
    table.insert(buttons, button)

    -- Add event handlers for the buttons
    if i == 1 then
        button.MouseButton1Click:Connect(function()
-- Create a ScreenGui instance
local screenGui = Instance.new("ScreenGui")

-- Create TextBox instance for Enter Speed, and TextButton instances for Close and Go! buttons
local enterSpeedTextBox = Instance.new("TextBox", screenGui)
local closeButton = Instance.new("TextButton", screenGui)
local goButton = Instance.new("TextButton", screenGui)

-- Customize Enter Speed TextBox
enterSpeedTextBox.PlaceholderText = "Enter Speed"
enterSpeedTextBox.Size = UDim2.new(0, 140, 0, 40)
enterSpeedTextBox.Position = UDim2.new(0.5, -70, 0.5, -20)
enterSpeedTextBox.BackgroundColor3 = Color3.fromRGB(240, 211, 96) -- Changed color to provided yellow
enterSpeedTextBox.Font = Enum.Font.SourceSans
enterSpeedTextBox.TextColor3 = Color3.new(1, 1, 1)
enterSpeedTextBox.TextSize = 20
enterSpeedTextBox.Text = "" -- Ensure the TextBox is initially empty

-- Customize Close button
closeButton.Text = "X"
closeButton.Size = UDim2.new(0, 40, 0, 40)
closeButton.Position = UDim2.new(0.5, -115, 0.5, -20)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Reverted to previous color
closeButton.Font = Enum.Font.GothamBold
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.TextSize = 20

-- Customize Go! button
goButton.Text = "Go!"
goButton.Size = UDim2.new(0, 40, 0, 40)
goButton.Position = UDim2.new(0.5, 75, 0.5, -20)
goButton.BackgroundColor3 = Color3.fromRGB(240, 211, 96) -- Changed color to provided yellow
goButton.Font = Enum.Font.GothamBold
goButton.TextColor3 = Color3.new(1, 1, 1)
goButton.TextSize = 20

-- Close button functionality
closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy() -- Close the GUI when the Close button is clicked
end)

-- Go! button functionality
goButton.MouseButton1Click:Connect(function()
    local speed = tonumber(enterSpeedTextBox.Text)
    if speed then
        -- Change the character's speed
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = speed
        end
    else
        -- Handle invalid input (e.g., not a number)
        warn("Invalid speed entered")
    end
end)

-- Add the ScreenGui to the player's GUI
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Function to make the buttons and TextBox draggable together
local function makeDraggable(elements)
    local dragging = false
    local dragInput, mousePos, startPositions

    local function updatePositions(delta)
        for _, element in pairs(elements) do
            element.Position = UDim2.new(element.Position.X.Scale, startPositions[element].X + delta.X, element.Position.Y.Scale, startPositions[element].Y + delta.Y)
        end
    end

    for _, element in pairs(elements) do
        element.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                mousePos = input.Position
                startPositions = {}
                for _, elem in pairs(elements) do
                    startPositions[elem] = {X = elem.Position.X.Offset, Y = elem.Position.Y.Offset}
                end

                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)

        element.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                dragInput = input
            end
        end)
    end

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            updatePositions(delta)
        end
    end)
end

-- Make the buttons and TextBox draggable together
makeDraggable({enterSpeedTextBox, closeButton, goButton})
        end)
    elseif i == 2 then
        button.MouseButton1Click:Connect(function()
-- create a ScreenGui instance
local screenGui = Instance.new("ScreenGui")

-- create TextButton instances for Ghost Mode, Close, and Off buttons
local ghostModeButton = Instance.new("TextButton", screenGui)
local closeButton = Instance.new("TextButton", screenGui)
local toggleButton = Instance.new("TextButton", screenGui)

-- customize Ghost Mode button
ghostModeButton.Text = "Ghost Mode" -- renamed button
ghostModeButton.Size = UDim2.new(0, 140, 0, 40)
ghostModeButton.Position = UDim2.new(0.5, -70, 0.5, -20)
ghostModeButton.BackgroundColor3 = Color3.fromRGB(240, 211, 96) -- yellow color
ghostModeButton.Font = Enum.Font.SourceSans
ghostModeButton.TextColor3 = Color3.new(1, 1, 1)
ghostModeButton.TextSize = 20

-- customize Close button
closeButton.Text = "X"
closeButton.Size = UDim2.new(0, 40, 0, 40)
closeButton.Position = UDim2.new(0.5, -115, 0.5, -20)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
closeButton.Font = Enum.Font.GothamBold
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.TextSize = 20

-- customize Off button to match Ghost Mode button color
toggleButton.Text = "Off"
toggleButton.Size = UDim2.new(0, 40, 0, 40)
toggleButton.Position = UDim2.new(0.5, 75, 0.5, -20)
toggleButton.BackgroundColor3 = Color3.fromRGB(240, 211, 96) -- matched yellow color
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.TextSize = 20

-- draggable functionality for the buttons
local userInputService = game:GetService("UserInputService")
local dragging = false
local dragStart = nil
local startPos = nil

local function updateButtonPositions(delta)
    ghostModeButton.Position = UDim2.new(startPos.ghostModeButton.X.Scale, startPos.ghostModeButton.X.Offset + delta.X, startPos.ghostModeButton.Y.Scale, startPos.ghostModeButton.Y.Offset + delta.Y)
    closeButton.Position = UDim2.new(startPos.closeButton.X.Scale, startPos.closeButton.X.Offset + delta.X, startPos.closeButton.Y.Scale, startPos.closeButton.Y.Offset + delta.Y)
    toggleButton.Position = UDim2.new(startPos.toggleButton.X.Scale, startPos.toggleButton.X.Offset + delta.X, startPos.toggleButton.Y.Scale, startPos.toggleButton.Y.Offset + delta.Y)
end

local function onInputChanged(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        updateButtonPositions(delta)
    end
end

local function onInputEnded(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end

ghostModeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = {
            ghostModeButton = ghostModeButton.Position,
            closeButton = closeButton.Position,
            toggleButton = toggleButton.Position,
        }
    end
end)

userInputService.InputChanged:Connect(onInputChanged)
userInputService.InputEnded:Connect(onInputEnded)

-- player jump functionality
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local isXPressed = false

-- function to handle key press
local function onKeyPress(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    -- check if the spacebar is pressed
    if input.KeyCode == Enum.KeyCode.Space then
        -- if X button is pressed, only allow jump if character is touching the ground
        if isXPressed and humanoid:GetState() == Enum.HumanoidStateType.Running then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end

-- connect the key press event
userInputService.InputBegan:Connect(onKeyPress)

-- Walk through Walls toggle functionality
local walkThroughWallsEnabled = false

local function toggleCanCollide(character, canCollide)
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = canCollide
        end
    end
end

local function maintainCanCollide(character, canCollide)
    while walkThroughWallsEnabled do
        toggleCanCollide(character, canCollide)
        wait(0.1) -- adjust the wait time as necessary to balance performance and responsiveness
    end
end

toggleButton.MouseButton1Click:Connect(function()
    walkThroughWallsEnabled = not walkThroughWallsEnabled
    toggleButton.Text = walkThroughWallsEnabled and "On" or "Off"
    
    if walkThroughWallsEnabled then
        coroutine.wrap(function()
            maintainCanCollide(character, false)
        end)()
        print("Walk through walls enabled")
    else
        toggleCanCollide(character, true)
        print("Walk through walls disabled")
    end
end)

-- Close button functionality with 0.1-second delay
closeButton.MouseButton1Click:Connect(function()
    isXPressed = true -- mark the X button as pressed
    walkThroughWallsEnabled = false
    toggleButton.Text = "Off"
    toggleCanCollide(character, true) -- ensure CanCollide is set to true for all parts
    wait(0.1) -- wait for 0.1 seconds before closing the GUI
    screenGui:Destroy() -- close the GUI
end)

-- Ensure the character parts are updated if the character respawns
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    
    if walkThroughWallsEnabled then
        coroutine.wrap(function()
            maintainCanCollide(character, false)
        end)()
    else
        toggleCanCollide(character, true)
    end
end)

-- add the ScreenGui to the player's GUI
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Set CanCollide to true for all parts when script starts, ensuring no initial wall-walking
toggleCanCollide(character, true)
        end)
    end
end

-- Variables to hold the dragging state
local dragging = false
local dragInput, mousePos, framePos

-- Function to update the buttons' positions
local function update(input)
    local delta = input.Position - mousePos
    for _, button in ipairs(buttons) do
        button.Position = UDim2.new(
            framePos[button].X.Scale,
            framePos[button].X.Offset + delta.X,
            framePos[button].Y.Scale,
            framePos[button].Y.Offset + delta.Y
        )
    end
end

-- Detect when input begins on any button
for _, button in ipairs(buttons) do
    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = {}
            for _, btn in ipairs(buttons) do
                framePos[btn] = btn.Position
            end

            -- Detect when the input state changes (e.g., mouse button released)
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    -- Detect changes in input (e.g., mouse movement)
    button.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
end

-- Update buttons' positions as the input changes
game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)
