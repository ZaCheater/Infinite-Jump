-- Create a ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create four draggable buttons
local buttons = {}
local closeButtonSize = UDim2.new(0, 150, 0, 40) -- Slightly smaller horizontal size for the Close button
local buttonSize = UDim2.new(0, 150, 0, 50) -- Slightly smaller horizontal size for the buttons
local buttonSpacing = 10 -- Spacing between buttons

-- Create the Close button first
local closeButton = Instance.new("TextButton")
closeButton.Size = closeButtonSize -- Adjusted size for the Close button
closeButton.Position = UDim2.new(0.5, -75, 0.4, 0) -- Position for Close button (original position of "-")
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red color
closeButton.Font = Enum.Font.GothamBold
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.TextSize = 20
closeButton.Text = "Close" -- Close button text
closeButton.Parent = screenGui
table.insert(buttons, closeButton)

-- Function to close the GUI
closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

-- Create the other three buttons with baby blue color and rename them
local buttonNames = {"Fly", "Infinite Jump", "Gravity"}
for i = 1, 3 do
    local button = Instance.new("TextButton")
    button.Size = buttonSize
    button.Text = buttonNames[i] -- Set button text to the corresponding name
    button.Position = UDim2.new(0.5, -75, 0.4 + i * (0.05 + closeButtonSize.Y.Scale), 0) -- Adjusted for new size and spacing
    button.BackgroundColor3 = Color3.fromRGB(137, 207, 240) -- Baby blue color
    button.Font = Enum.Font.GothamBold
    button.TextColor3 = Color3.new(1, 1, 1)
    button.TextSize = 20
    button.Parent = screenGui
    table.insert(buttons, button)

    -- Add click event handler for the "Infinite Jump" button
    if i == 2 then
        button.MouseButton1Click:Connect(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/ZaCheater/Infinite-Jump/main/Infinite%20Jump"))()
        end)
    end

    -- Add click event handler for the "Fly" button
    if i == 1 then
        button.MouseButton1Click:Connect(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
        end)
    end

    -- Add click event handler for the "Gravity" button
    if i == 3 then
        button.MouseButton1Click:Connect(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/ZaCheater/Infinite-Jump/main/Gravity"))()
        end)
    end
end

-- Variables to hold the dragging state
local dragging = false
local dragInput, mousePos, framePos

-- Function to update the buttons' positions
local function update(input)
    local delta = input.Position - mousePos
    for _, button in ipairs(buttons) do
        button.Position = UDim2.new(
            framePos[button].X.Scale,
            framePos[button].X.Offset + delta.X,
            framePos[button].Y.Scale,
            framePos[button].Y.Offset + delta.Y
        )
    end
end

-- Detect when input begins on any button
for _, button in ipairs(buttons) do
    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = {}
            for _, btn in ipairs(buttons) do
                framePos[btn] = btn.Position
            end

            -- Detect when the input state changes (e.g., mouse button released)
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    -- Detect changes in input (e.g., mouse movement)
    button.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
end

-- Update buttons' positions as the input changes
game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)
