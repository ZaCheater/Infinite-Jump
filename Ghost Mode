-- create a ScreenGui instance
local screenGui = Instance.new("ScreenGui")

-- create TextButton instances for Ghost Mode, Close, and Off buttons
local ghostModeButton = Instance.new("TextButton", screenGui)
local closeButton = Instance.new("TextButton", screenGui)
local toggleButton = Instance.new("TextButton", screenGui)

-- customize Ghost Mode button
ghostModeButton.Text = "Ghost Mode" -- renamed button
ghostModeButton.Size = UDim2.new(0, 140, 0, 40)
ghostModeButton.Position = UDim2.new(0.5, -70, 0.5, -20)
ghostModeButton.BackgroundColor3 = Color3.fromRGB(240, 211, 96) -- yellow color
ghostModeButton.Font = Enum.Font.SourceSans
ghostModeButton.TextColor3 = Color3.new(1, 1, 1)
ghostModeButton.TextSize = 20

-- customize Close button
closeButton.Text = "X"
closeButton.Size = UDim2.new(0, 40, 0, 40)
closeButton.Position = UDim2.new(0.5, -115, 0.5, -20)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
closeButton.Font = Enum.Font.GothamBold
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.TextSize = 20

-- customize Off button to match Ghost Mode button color
toggleButton.Text = "Off"
toggleButton.Size = UDim2.new(0, 40, 0, 40)
toggleButton.Position = UDim2.new(0.5, 75, 0.5, -20)
toggleButton.BackgroundColor3 = Color3.fromRGB(240, 211, 96) -- matched yellow color
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.TextSize = 20

-- draggable functionality for the buttons
local userInputService = game:GetService("UserInputService")
local dragging = false
local dragStart = nil
local startPos = nil

local function updateButtonPositions(delta)
    ghostModeButton.Position = UDim2.new(startPos.ghostModeButton.X.Scale, startPos.ghostModeButton.X.Offset + delta.X, startPos.ghostModeButton.Y.Scale, startPos.ghostModeButton.Y.Offset + delta.Y)
    closeButton.Position = UDim2.new(startPos.closeButton.X.Scale, startPos.closeButton.X.Offset + delta.X, startPos.closeButton.Y.Scale, startPos.closeButton.Y.Offset + delta.Y)
    toggleButton.Position = UDim2.new(startPos.toggleButton.X.Scale, startPos.toggleButton.X.Offset + delta.X, startPos.toggleButton.Y.Scale, startPos.toggleButton.Y.Offset + delta.Y)
end

local function onInputChanged(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        updateButtonPositions(delta)
    end
end

local function onInputEnded(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end

ghostModeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = {
            ghostModeButton = ghostModeButton.Position,
            closeButton = closeButton.Position,
            toggleButton = toggleButton.Position,
        }
    end
end)

userInputService.InputChanged:Connect(onInputChanged)
userInputService.InputEnded:Connect(onInputEnded)

-- player jump functionality
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local isXPressed = false

-- function to handle key press
local function onKeyPress(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    -- check if the spacebar is pressed
    if input.KeyCode == Enum.KeyCode.Space then
        -- if X button is pressed, only allow jump if character is touching the ground
        if isXPressed and humanoid:GetState() == Enum.HumanoidStateType.Running then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end

-- connect the key press event
userInputService.InputBegan:Connect(onKeyPress)

-- Walk through Walls toggle functionality
local walkThroughWallsEnabled = false

local function toggleCanCollide(character, canCollide)
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = canCollide
        end
    end
end

local function maintainCanCollide(character, canCollide)
    while walkThroughWallsEnabled do
        toggleCanCollide(character, canCollide)
        wait(0.1) -- adjust the wait time as necessary to balance performance and responsiveness
    end
end

toggleButton.MouseButton1Click:Connect(function()
    walkThroughWallsEnabled = not walkThroughWallsEnabled
    toggleButton.Text = walkThroughWallsEnabled and "On" or "Off"
    
    if walkThroughWallsEnabled then
        coroutine.wrap(function()
            maintainCanCollide(character, false)
        end)()
        print("Walk through walls enabled")
    else
        toggleCanCollide(character, true)
        print("Walk through walls disabled")
    end
end)

-- Close button functionality with 0.1-second delay
closeButton.MouseButton1Click:Connect(function()
    isXPressed = true -- mark the X button as pressed
    walkThroughWallsEnabled = false
    toggleButton.Text = "Off"
    toggleCanCollide(character, true) -- ensure CanCollide is set to true for all parts
    wait(0.1) -- wait for 0.1 seconds before closing the GUI
    screenGui:Destroy() -- close the GUI
end)

-- Ensure the character parts are updated if the character respawns
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    
    if walkThroughWallsEnabled then
        coroutine.wrap(function()
            maintainCanCollide(character, false)
        end)()
    else
        toggleCanCollide(character, true)
    end
end)

-- add the ScreenGui to the player's GUI
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Set CanCollide to true for all parts when script starts, ensuring no initial wall-walking
toggleCanCollide(character, true)
